import { NextResponse } from "next/server"

// ðŸš— GET : rÃ©cupÃ©rer un vÃ©hicule par son ID
export async function GET_BY_ID(_: Request, { params }: { params: { id: string } }) {
  try {
    const vehicle = await prisma.vehicle.findUnique({ where: { id: params.id } })
    if (!vehicle) {
      return NextResponse.json({ error: 'VÃ©hicule non trouvÃ©' }, { status: 404 })
    }
    return NextResponse.json(vehicle)
  } catch (error) {
    console.error('Erreur GET /vehicle/:id:', error)
    return NextResponse.json({ error: 'Erreur serveur' }, { status: 500 })
  }
}

// ðŸš— PUT : mettre Ã  jour un vÃ©hicule
export async function PUT(req: Request, { params }: { params: { id: string } }) {
  try {
    const body = await req.json()
    const updated = await prisma.vehicle.update({
      where: { id: params.id },
      data: body,
    })
    return NextResponse.json(updated)
  } catch (error) {
    console.error('Erreur PUT /vehicle/:id:', error)
    return NextResponse.json({ error: 'Erreur lors de la mise Ã  jour' }, { status: 500 })
  }
}

// ðŸš— DELETE : supprimer un vÃ©hicule
export async function DELETE(_: Request, { params }: { params: { id: string } }) {
  try {
    await prisma.vehicle.delete({ where: { id: params.id } })
    return NextResponse.json({ message: 'VÃ©hicule supprimÃ©' })
  } catch (error) {
    console.error('Erreur DELETE /vehicle/:id:', error)
    return NextResponse.json({ error: 'Erreur lors de la suppression' }, { status: 500 })
  }
}

